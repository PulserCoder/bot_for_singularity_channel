import random
import textwrap

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from markups import start_menu

bot = Bot(token='6802675140:AAHNY-n1Lb39GHI2TGdkRXgE_i8_NhfuUZs', parse_mode='html')
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['send_to'], state='*')
async def send_message_to_channel(message: types.Message, state: FSMContext):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π –±—ã –º–æ–≥ –≥—Ä–∞–Ω—Ç –±—ã—Ç—å —É —Ç–µ–±—è',
                                        url='https://t.me/sup_singularity_robot')
    markup.add(button)
    await bot.send_message(chat_id=-1002112489499, text=textwrap.dedent("""
–ö–∞–∫ —Ç—ã –º–æ–≥ –∑–∞–º–µ—Ç–∏—Ç—å, —É –Ω–∞—Å –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –≥—Ä–∞–Ω—Ç–æ–≤. –ß—Ç–æ —ç—Ç–æ?

–°–∏—Å—Ç–µ–º–∞ –≥—Ä–∞–Ω—Ç–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–¥–∂–µ
–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—É—é —Å—Ç—É–¥–µ–Ω—Ç–∞–º –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è. –í –Ω–∞—à–µ–º –∫–æ–ª–ª–µ–¥–∂–µ –≥—Ä–∞–Ω—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç –Ω–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –ì–µ–æ—Ä–≥–∏—è –°–æ–ª–æ–≤—å–µ–≤–∞.

–ù–æ —Å—Ç–æ–∏—Ç –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –∫–∞–∂–¥—ã–π –≥—Ä–∞–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ—Ç–µ—Ä–∏.

–ï—Å–ª–∏ —Ç—ã —É—á–∏—à—å—Å—è –æ—á–µ–Ω—å –¥–∞–∂–µ —Ö–æ—Ä–æ—à–æ, —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—à—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Å—Ä–æ–∫, —Ç–æ —Ç–µ–±—è —Ç–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–æ–π–¥—É—Ç —Å—Ç–æ—Ä–æ–Ω–æ–π.

–ò —Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ê –±–µ–∑ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ IT-–∫–æ–ª–ª–µ–¥–∂? –î–ê! –ù–æ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è —É—á–∏—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω–æ–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –æ—Å–Ω–æ–≤–µ
    """), reply_markup=markup)


@dp.message_handler(commands=['start'], state='*')
async def start_foo(message: types.Message, state: FSMContext):
    await state.reset_state()
    await message.answer(textwrap.dedent("""
    –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–µ–º –∫–∞–∫–æ–π –≥—Ä–∞–Ω—Ç –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —Ç—ã –±—ã –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –ø–æ —Å–∏—Å—Ç–µ–º–µ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–æ–ª–ª–µ–¥–∂ Singularity Hub
    –í –Ω–∞—à–µ–º –∫–æ–ª–ª–µ–¥–∂–µ –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç 140 000 —Ä—É–±–ª–µ–π –≤ –≥–æ–¥, –Ω–æ –≥—Ä–∞–Ω—Ç–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å –æ—Ç 10% –¥–æ 100% –ø–ª–∞—Ç—ã –∑–∞ –æ–±—É—á–µ–Ω–∏—è, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–Ω–≥–ª–π–∏—Å–∫–∏–π
    
    –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å" —á—Ç–æ–±—ã –ø–æ—Å–∫–æ—Ä–µ–µ –ø—Ä–æ–π—Ç–∏–∏ –∫–æ—Ä–æ—Ç–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç)
    """)
                         , reply_markup=start_menu())


# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class QuizState(StatesGroup):
    question = State()  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    score = State()  # –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç


# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
questions = [
    {
        "question": "–¢—ã –ª—é–±–∏—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è? üòä",
        "answers": [
            ("–ù–µ –≤–∏–∂—É —Å–º—ã—Å–ª–∞. ü§∑", 0),
            ("–ò–Ω–æ–≥–¥–∞, –Ω–æ –ª–µ–Ω—å. üò¥", 5000),
            ("–ö–æ–≥–¥–∞ –µ—Å—Ç—å –≤—Ä–µ–º—è, –¥–∞. ‚è≥", 10000),
            ("–ö–æ–Ω–µ—á–Ω–æ, —ç—Ç–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ! üåü", 20000)
        ]
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ IT-—Å—Ñ–µ—Ä —Ç—ã –∑–Ω–∞–µ—à—å? üíª",
        "answers": [
            ("–ù–∏ –æ–¥–Ω–æ–π, –Ω–µ –º–æ—ë. üö´", 0),
            ("–ó–Ω–∞—é –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. üñ•", 5000),
            ("–ì–¥–µ-—Ç–æ 5 —Ä–∞–∑–Ω—ã—Ö. ü§î", 10000),
            ("–í—Å–µ! –ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–∞–∂–¥—É—é. üë®‚Äçüíª", 20000)
        ]
    },
    {
        "question": "–û–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å –±—É–¥—É—â–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π? üöÄ",
        "answers": [
            ("–ù–µ—Ç, –∂–∏–≤—É –Ω–∞—Å—Ç–æ—è—â–∏–º. üé≤", 0),
            ("–í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞, –µ—Å—Ç—å –Ω–∞–¥–µ–∂–¥–∞. üå±", 5000),
            ("–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω. ü§®", 10000),
            ("–î–∞, —É–≤–µ—Ä–µ–Ω–Ω–æ —à–∞–≥–∞—é –∫ —Ü–µ–ª–∏! üíº", 20000)
        ]
    },
    {
        "question": "–¢—ã –æ—Ç–∫—Ä—ã—Ç –∫ –Ω–æ–≤–æ–º—É –∏ –≥–æ—Ç–æ–≤ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? üöß",
        "answers": [
            ("–ù–µ—Ç, —ç—Ç–æ –Ω–µ –ø—Ä–æ –º–µ–Ω—è. üòì", 0),
            ("–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏. ‚öñÔ∏è", 5000),
            ("–ì–æ—Ç–æ–≤, –Ω–æ –º–æ–≥—É —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è. üå™", 10000),
            ("–î–∞, –Ω–∏—á—Ç–æ –º–µ–Ω—è –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç! üí•", 20000)
        ]
    },
    {
        "question": "–ì–æ—Ç–æ–≤ –∫ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–π –≤–µ—Å—å –¥–µ–Ω—å? üèãÔ∏è‚Äç‚ôÇÔ∏è",
        "answers": [
            ("–ù–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞. üõå", 0),
            ("–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, –Ω–æ –º–æ–≥—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å. ü§∑‚Äç‚ôÇÔ∏è", 5000),
            ("–ì–æ—Ç–æ–≤ –∏ –±—É–¥—É –Ω–∞—Ö–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å. ‚öñÔ∏è", 10000),
            ("–î–∞, —è –≥–æ—Ç–æ–≤ –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä—É–∑–∫–∞–º! üí™", 20000)
        ]
    },
    {
        "question": "–ö–∞–∫—É—é —Ä–æ–ª—å –∏–≥—Ä–∞—é—Ç —Ñ–∏–Ω–∞–Ω—Å—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏? üí∞",
        "answers": [
            ("–ù–µ –≥–ª–∞–≤–Ω–æ–µ, –ª–∏—à—å –±—ã —Ö–≤–∞—Ç–∞–ª–æ –Ω–∞ –±–∞–∑–æ–≤–æ–µ. üçú", 0),
            ("–í–∞–∂–Ω—ã, –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤ —É—Å–µ—Ä–¥–Ω–æ —Ç—Ä—É–¥–∏—Ç—å—Å—è. üòë", 5000),
            ("–í–∞–∂–Ω—ã, –∏—â—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞. üëç", 10000),
            ("–ö—Ä–∞–π–Ω–µ –≤–∞–∂–Ω—ã, –≥—Ä–∞–±–ª—é –∫–∞–∂–¥—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å. üìà", 20000)
        ]
    },
    {
        "question": "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –ª–∏—á–Ω—ã–µ —Ü–µ–ª–∏? üéØ",
        "answers": [
            ("–ñ–∏–≤—É –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ. üå¨", 0),
            ("–•–æ—á—É –¥–æ—Å—Ç–æ–π–Ω—É—é –∂–∏–∑–Ω—å –∏ –≥–æ—Ä–¥–æ—Å—Ç—å –º–∞–º—ã. ‚ù§Ô∏è", 5000),
            ("–î—É–º–∞—é –æ —Ö–æ—Ä–æ—à–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–µ. üí≠", 10000),
            ("–ö–æ–Ω–µ—á–Ω–æ, —Å—Ç—Ä–µ–º–ª—é—Å—å –±—ã—Ç—å –ª—É—á—à–∏–º! ‚≠êÔ∏è", 20000)
        ]
    }
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ–ø—Ä–æ—Å–∞
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–ù–∞—á–∞—Ç—å'))
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞
@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—åü§ì", state="*")
async def start_quiz(message: types.Message, state: FSMContext):
    await QuizState.question.set()
    await state.update_data(question_idx=0, total_score=0)
    await ask_question(message, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async def ask_question(message, state: FSMContext):
    user_data = await state.get_data()
    question_idx = user_data.get('question_idx')

    if question_idx < len(questions):
        question = questions[question_idx]
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        answers = question['answers']
        random.shuffle(answers)
        for answer in answers:
            keyboard.add(KeyboardButton(answer[0]))
        await message.answer(question['question'], reply_markup=keyboard)
    else:
        total_score = user_data.get('total_score', 0)
        if total_score < 15000:
            ans = (
                f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, —ç—Ç–æ—Ç –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è 100% –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ–º –≤–∞—Å –≤ –≥–ª–∞–∑–∞—Ö –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏, –≤–µ–¥—å —Ç–∞–º —Å–º–æ—Ç—Ä—è—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–π –≥—Ä–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä—É–±–ª—è—Ö: {total_score}")
        elif 15000 < total_score < 60000:
            ans = (
                f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –£ –≤–∞—Å —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏ —ç—Ç–æ –∫—Ä—É—Ç–æ!\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–π –≥—Ä–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä—É–±–ª—è—Ö: {total_score}")
        elif 60000 < total_score < 100000:
            ans = (
                f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –£ –æ—á–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–∞–º —Å—Ç–æ–∏—Ç —Å–µ—Ä—å–µ–∑–Ω–æ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –∫–∞—Ä—å–µ—Ä–µ –≤ IT\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–π –≥—Ä–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä—É–±–ª—è—Ö: {total_score}")
        else:
            ans = (
                f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –¢—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è IT, —Ç—ã –±—ã —É—á–∏–ª—Å—è c –æ–≥—Ä–æ–º–Ω–æ–π —Å–∫–∏–¥–∫–æ–π\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–π –≥—Ä–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä—É–±–ª—è—Ö: {total_score}")
        await message.answer(ans)

        await state.finish()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
@dp.message_handler(state=QuizState.question)
async def handle_answer(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    question_idx = user_data.get('question_idx', 0)
    total_score = user_data.get('total_score', 0)

    question = questions[question_idx]
    answer = next((ans for ans in question['answers'] if ans[0] == message.text), None)

    if answer:
        total_score += answer[1]

    await state.update_data(question_idx=question_idx + 1, total_score=total_score)
    await ask_question(message, state)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
